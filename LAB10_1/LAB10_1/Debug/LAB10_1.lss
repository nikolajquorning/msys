
LAB10_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000362  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003b3  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000221  00000000  00000000  0000081f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000352  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00000d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000022e  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a2  00000000  00000000  000011da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	0e c1       	rjmp	.+540    	; 0x22a <__vector_3>
   e:	00 00       	nop
  10:	34 c1       	rjmp	.+616    	; 0x27a <__vector_4>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	92 c0       	rjmp	.+292    	; 0x16a <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ae c0       	rjmp	.+348    	; 0x1ba <__vector_23>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	e2 d0       	rcall	.+452    	; 0x2ca <main>
 106:	f1 c0       	rjmp	.+482    	; 0x2ea <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <init_LEDport>:
	unsigned char mask;
	if (led_nr <= MAX_LED_NR)
	{
		mask = 0b00000001 << led_nr;
	}
	PORTB = PINB & ~mask;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	84 b9       	out	0x04, r24	; 4
 10e:	15 b8       	out	0x05, r1	; 5
 110:	08 95       	ret

00000112 <toggleLED>:
}

void toggleLED(unsigned char led_nr)
{
	unsigned char mask;
	if (led_nr <= MAX_LED_NR)
 112:	88 30       	cpi	r24, 0x08	; 8
 114:	28 f4       	brcc	.+10     	; 0x120 <toggleLED+0xe>
	{
		mask = 0b00000001 << led_nr;
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	01 c0       	rjmp	.+2      	; 0x11c <toggleLED+0xa>
 11a:	99 0f       	add	r25, r25
 11c:	8a 95       	dec	r24
 11e:	ea f7       	brpl	.-6      	; 0x11a <toggleLED+0x8>
	}
	PORTB = PINB ^ mask;
 120:	83 b1       	in	r24, 0x03	; 3
 122:	98 27       	eor	r25, r24
 124:	95 b9       	out	0x05, r25	; 5
 126:	08 95       	ret

00000128 <init_interrupts>:

unsigned int timer0Counter = 0;


void init_interrupts() {
	EIMSK = (1 << INT2) | (1 << INT3); //activate interrupts for INT2 and INT3
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0b11100000;                //falling edge of INT2, rising edge for INT3
 12c:	80 ee       	ldi	r24, 0xE0	; 224
 12e:	80 93 69 00 	sts	0x0069, r24
	sei();                             //activate interrupts
 132:	78 94       	sei
 134:	08 95       	ret

00000136 <init_timer0>:
}

void init_timer0() {
	TCCR0A = 0x00;
 136:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x01;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);              //set timer0 interrupt overflow
 13c:	ee e6       	ldi	r30, 0x6E	; 110
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	81 60       	ori	r24, 0x01	; 1
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <init_timer1>:
}

void init_timer1() {
	TCCR1A = 0x00;
 148:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0b00001100; //mode 4
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	80 93 81 00 	sts	0x0081, r24
	OCR1A = 15625-1;      //((16000000/256)/4)-1
 152:	88 e0       	ldi	r24, 0x08	; 8
 154:	9d e3       	ldi	r25, 0x3D	; 61
 156:	90 93 89 00 	sts	0x0089, r25
 15a:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1<<OCIE1A);
 15e:	ef e6       	ldi	r30, 0x6F	; 111
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	82 60       	ori	r24, 0x02	; 2
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <__vector_17>:
}


ISR(TIMER1_COMPA_vect) {
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	0b b6       	in	r0, 0x3b	; 59
 176:	0f 92       	push	r0
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
	toggleLED(5);
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	bf df       	rcall	.-130    	; 0x112 <toggleLED>
}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0b be       	out	0x3b, r0	; 59
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <__vector_23>:

ISR(TIMER0_OVF_vect) {
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	0b b6       	in	r0, 0x3b	; 59
 1c6:	0f 92       	push	r0
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
	timer0Counter++;
 1e0:	80 91 00 02 	lds	r24, 0x0200
 1e4:	90 91 01 02 	lds	r25, 0x0201
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	90 93 01 02 	sts	0x0201, r25
 1ee:	80 93 00 02 	sts	0x0200, r24
	if (timer0Counter == 62500) {
 1f2:	84 32       	cpi	r24, 0x24	; 36
 1f4:	94 4f       	sbci	r25, 0xF4	; 244
 1f6:	31 f4       	brne	.+12     	; 0x204 <__vector_23+0x4a>
		toggleLED(6);
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	8b df       	rcall	.-234    	; 0x112 <toggleLED>
		timer0Counter = 0;
 1fc:	10 92 01 02 	sts	0x0201, r1
 200:	10 92 00 02 	sts	0x0200, r1
	}
}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0b be       	out	0x3b, r0	; 59
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <__vector_3>:

ISR(INT2_vect) {
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	0b b6       	in	r0, 0x3b	; 59
 236:	0f 92       	push	r0
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
	//do stuff when INT2 interrupt happens
	toggleLED(2);
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	5f df       	rcall	.-322    	; 0x112 <toggleLED>
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0b be       	out	0x3b, r0	; 59
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <__vector_4>:

ISR(INT3_vect) {
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	0b b6       	in	r0, 0x3b	; 59
 286:	0f 92       	push	r0
 288:	2f 93       	push	r18
 28a:	3f 93       	push	r19
 28c:	4f 93       	push	r20
 28e:	5f 93       	push	r21
 290:	6f 93       	push	r22
 292:	7f 93       	push	r23
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
	//do stuff when INT3 interrupt happens
	toggleLED(3);
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	37 df       	rcall	.-402    	; 0x112 <toggleLED>
}
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0b be       	out	0x3b, r0	; 59
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <main>:


int main(void)
{
	init_LEDport();
 2ca:	1f df       	rcall	.-450    	; 0x10a <init_LEDport>
	init_interrupts();
 2cc:	2d df       	rcall	.-422    	; 0x128 <init_interrupts>
	init_timer0();
 2ce:	33 df       	rcall	.-410    	; 0x136 <init_timer0>
	init_timer1();
 2d0:	3b df       	rcall	.-394    	; 0x148 <init_timer1>
	while (1)
	{
		toggleLED(7);
 2d2:	87 e0       	ldi	r24, 0x07	; 7
 2d4:	1e df       	rcall	.-452    	; 0x112 <toggleLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	83 ed       	ldi	r24, 0xD3	; 211
 2da:	90 e3       	ldi	r25, 0x30	; 48
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	80 40       	sbci	r24, 0x00	; 0
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x12>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x1c>
 2e6:	00 00       	nop
 2e8:	f4 cf       	rjmp	.-24     	; 0x2d2 <main+0x8>

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
