
LAB8_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002d6  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ca  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000276  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000009b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018f  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000139  00000000  00000000  00000bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	14 d0       	rcall	.+40     	; 0x11e <main>
  f6:	3b c0       	rjmp	.+118    	; 0x16e <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <T1Delay>:

void T1Delay()
{
	//16000000 / 1024 = 15625 Hz
	//Dvs. 15626 trin i sekundet
	TCNT1 = 65535-15626;
  fa:	85 ef       	ldi	r24, 0xF5	; 245
  fc:	92 ec       	ldi	r25, 0xC2	; 194
  fe:	90 93 85 00 	sts	0x0085, r25
 102:	80 93 84 00 	sts	0x0084, r24
	// Timer 1 i Normal Mode og Prescaling = 1024
	TCCR1A = 0b00000000;
 106:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0b00000101;
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	80 93 81 00 	sts	0x0081, r24
	//Afvent timer 1 overflow flag
	while ((TIFR1 & 1)==0){}
 110:	b0 9b       	sbis	0x16, 0	; 22
 112:	fe cf       	rjmp	.-4      	; 0x110 <T1Delay+0x16>
	// Stop TImer 1
	TCCR1B = 0b00000000;
 114:	10 92 81 00 	sts	0x0081, r1
	// Reset Timer 1 flag
	TIFR1 = 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	86 bb       	out	0x16, r24	; 22
 11c:	08 95       	ret

0000011e <main>:
int main()
{
unsigned char tiere = 0;
unsigned char enere = 0;
  // Klargør LED port
  DDRB = 0xFF;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	84 b9       	out	0x04, r24	; 4
  initLEDport();
 122:	1f d0       	rcall	.+62     	; 0x162 <initLEDport>
  
  while(1)
  {
    // Juster enere og tiere (BCD format)
	for (int i=0; i<=5; i++)
 124:	c1 2c       	mov	r12, r1
 126:	d1 2c       	mov	r13, r1
		for (int j=0; j<=9; j++)
		{
			// Vent til 1 sekund
			T1Delay();
			enere++;
			writeAllLEDs((tiere << 4) | enere);
 128:	e1 2c       	mov	r14, r1
 12a:	fe 2c       	mov	r15, r14
  initLEDport();
  
  while(1)
  {
    // Juster enere og tiere (BCD format)
	for (int i=0; i<=5; i++)
 12c:	0c 2d       	mov	r16, r12
 12e:	1d 2d       	mov	r17, r13
 130:	10 c0       	rjmp	.+32     	; 0x152 <main+0x34>
	{
		for (int j=0; j<=9; j++)
		{
			// Vent til 1 sekund
			T1Delay();
 132:	e3 df       	rcall	.-58     	; 0xfa <T1Delay>
			enere++;
 134:	cf 5f       	subi	r28, 0xFF	; 255
			writeAllLEDs((tiere << 4) | enere);
 136:	8d 2f       	mov	r24, r29
 138:	8c 2b       	or	r24, r28
 13a:	17 d0       	rcall	.+46     	; 0x16a <writeAllLEDs>
  while(1)
  {
    // Juster enere og tiere (BCD format)
	for (int i=0; i<=5; i++)
	{
		for (int j=0; j<=9; j++)
 13c:	ca 30       	cpi	r28, 0x0A	; 10
 13e:	c9 f7       	brne	.-14     	; 0x132 <main+0x14>
 140:	0f 5f       	subi	r16, 0xFF	; 255
 142:	1f 4f       	sbci	r17, 0xFF	; 255
			enere++;
			writeAllLEDs((tiere << 4) | enere);
		}
		enere = 0;
		tiere++;
		writeAllLEDs((tiere << 4) | enere);
 144:	80 2f       	mov	r24, r16
 146:	82 95       	swap	r24
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	0f d0       	rcall	.+30     	; 0x16a <writeAllLEDs>
  initLEDport();
  
  while(1)
  {
    // Juster enere og tiere (BCD format)
	for (int i=0; i<=5; i++)
 14c:	06 30       	cpi	r16, 0x06	; 6
 14e:	11 05       	cpc	r17, r1
 150:	29 f0       	breq	.+10     	; 0x15c <main+0x3e>
		for (int j=0; j<=9; j++)
		{
			// Vent til 1 sekund
			T1Delay();
			enere++;
			writeAllLEDs((tiere << 4) | enere);
 152:	d0 2f       	mov	r29, r16
 154:	d2 95       	swap	r29
 156:	d0 7f       	andi	r29, 0xF0	; 240
 158:	cf 2d       	mov	r28, r15
 15a:	eb cf       	rjmp	.-42     	; 0x132 <main+0x14>
		enere = 0;
		tiere++;
		writeAllLEDs((tiere << 4) | enere);
	}
	tiere = 0;
	writeAllLEDs((tiere << 4) | enere);
 15c:	8e 2d       	mov	r24, r14
 15e:	05 d0       	rcall	.+10     	; 0x16a <writeAllLEDs>
  }
 160:	e5 cf       	rjmp	.-54     	; 0x12c <main+0xe>

00000162 <initLEDport>:
#include <avr/io.h>
#define MAX_LED_NR 7

void initLEDport()
{
	DDRB = 0xFF;
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 166:	15 b8       	out	0x05, r1	; 5
 168:	08 95       	ret

0000016a <writeAllLEDs>:
}

void writeAllLEDs(unsigned char pattern)
{
  // Hent parameteren og skriv til lysdioderne
	PORTB = pattern;
 16a:	85 b9       	out	0x05, r24	; 5
 16c:	08 95       	ret

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
