
LAB7_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000048f  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d2  00000000  00000000  000007a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000397  00000000  00000000  00000a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00000e10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fa  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f1  00000000  00000000  000010d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	02 d0       	rcall	.+4      	; 0xfa <main>
  f6:	64 c0       	rjmp	.+200    	; 0x1c0 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <main>:
int main()
{
  unsigned char i;

  // Klargøring af SWITCH-porten
  initSwitchPort();
  fa:	4d d0       	rcall	.+154    	; 0x196 <initSwitchPort>
  // Klargøring af LED-porten
  initLEDport();
  fc:	2a d0       	rcall	.+84     	; 0x152 <initLEDport>
  // Testen afsluttes, når man samtidigt
  // trykker på SW7 og SW0
  i = 0;
  while (i != 0b10000001)
  {
    i = switchStatus();
  fe:	4d d0       	rcall	.+154    	; 0x19a <switchStatus>
 100:	c8 2f       	mov	r28, r24
    writeAllLEDs(i);
 102:	2b d0       	rcall	.+86     	; 0x15a <writeAllLEDs>
  // Test af switchStatus():
  // Resultatet skrives til hele lysdiodeporten
  // Testen afsluttes, når man samtidigt
  // trykker på SW7 og SW0
  i = 0;
  while (i != 0b10000001)
 104:	c1 38       	cpi	r28, 0x81	; 129
 106:	d9 f7       	brne	.-10     	; 0xfe <main+0x4>
  }

  // Tænd alle lysdioder i 2 sekunder
  // og sluk så alle lysdioder
  // Så kan vi se, at næste test starter
  writeAllLEDs(0xFF);
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	27 d0       	rcall	.+78     	; 0x15a <writeAllLEDs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	87 ea       	ldi	r24, 0xA7	; 167
 110:	91 e6       	ldi	r25, 0x61	; 97
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x18>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x22>
 11c:	00 00       	nop
  _delay_ms(2000);
  writeAllLEDs(0);
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	1c d0       	rcall	.+56     	; 0x15a <writeAllLEDs>
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	87 ea       	ldi	r24, 0xA7	; 167
 126:	91 e6       	ldi	r25, 0x61	; 97
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x38>
 132:	00 00       	nop
  // Læs efter tur hver enkelt switch
  // og tænd tilsvarende lysdiode, hvis der trykkes på tasten
  // - ellers slukkes lysdiden
  while (1)
  {
    for (i=0; i<=7; i++)
 134:	d0 e0       	ldi	r29, 0x00	; 0
 136:	cd 2f       	mov	r28, r29
    {
      if (switchOn(i))
 138:	8c 2f       	mov	r24, r28
 13a:	32 d0       	rcall	.+100    	; 0x1a0 <switchOn>
 13c:	88 23       	and	r24, r24
 13e:	19 f0       	breq	.+6      	; 0x146 <main+0x4c>
        turnOnLED(i);
 140:	8c 2f       	mov	r24, r28
 142:	0d d0       	rcall	.+26     	; 0x15e <turnOnLED>
 144:	02 c0       	rjmp	.+4      	; 0x14a <main+0x50>
      else
        turnOffLED(i);
 146:	8c 2f       	mov	r24, r28
 148:	19 d0       	rcall	.+50     	; 0x17c <turnOffLED>
  // Læs efter tur hver enkelt switch
  // og tænd tilsvarende lysdiode, hvis der trykkes på tasten
  // - ellers slukkes lysdiden
  while (1)
  {
    for (i=0; i<=7; i++)
 14a:	cf 5f       	subi	r28, 0xFF	; 255
 14c:	c8 30       	cpi	r28, 0x08	; 8
 14e:	a1 f7       	brne	.-24     	; 0x138 <main+0x3e>
 150:	f2 cf       	rjmp	.-28     	; 0x136 <main+0x3c>

00000152 <initLEDport>:
#include <avr/io.h>
#define MAX_LED_NR 7

void initLEDport()
{
	DDRB = 0xFF;
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 156:	15 b8       	out	0x05, r1	; 5
 158:	08 95       	ret

0000015a <writeAllLEDs>:
}

void writeAllLEDs(unsigned char pattern)
{
  // Hent parameteren og skriv til lysdioderne
	PORTB = pattern;
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	08 95       	ret

0000015e <turnOnLED>:
void turnOnLED(unsigned char led_nr)
{
// Lokal variabel
unsigned char mask;
  // Vi skal kun lave noget, hvis led_nr < 8
  if (led_nr <= MAX_LED_NR)
 15e:	88 30       	cpi	r24, 0x08	; 8
 160:	60 f4       	brcc	.+24     	; 0x17a <turnOnLED+0x1c>
  {
    // Dan maske på basis af parameteren (led_nr)
    mask = 0b00000001 << led_nr;
    // Tænd den aktuelle lysdiode (de andre ændres ikke)
    PORTB = PINB | mask;
 162:	43 b1       	in	r20, 0x03	; 3
unsigned char mask;
  // Vi skal kun lave noget, hvis led_nr < 8
  if (led_nr <= MAX_LED_NR)
  {
    // Dan maske på basis af parameteren (led_nr)
    mask = 0b00000001 << led_nr;
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	b9 01       	movw	r22, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <turnOnLED+0x12>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	8a 95       	dec	r24
 172:	e2 f7       	brpl	.-8      	; 0x16c <turnOnLED+0xe>
 174:	cb 01       	movw	r24, r22
    // Tænd den aktuelle lysdiode (de andre ændres ikke)
    PORTB = PINB | mask;
 176:	84 2b       	or	r24, r20
 178:	85 b9       	out	0x05, r24	; 5
 17a:	08 95       	ret

0000017c <turnOffLED>:

void turnOffLED(unsigned char led_nr)
{
	//Lokal variabel
	unsigned char mask;
	if (led_nr <= MAX_LED_NR)
 17c:	88 30       	cpi	r24, 0x08	; 8
 17e:	28 f4       	brcc	.+10     	; 0x18a <turnOffLED+0xe>
	{
		mask = 0b00000001 << led_nr;
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	01 c0       	rjmp	.+2      	; 0x186 <turnOffLED+0xa>
 184:	99 0f       	add	r25, r25
 186:	8a 95       	dec	r24
 188:	ea f7       	brpl	.-6      	; 0x184 <turnOffLED+0x8>
	}
	PORTB = PINB & ~mask;
 18a:	23 b1       	in	r18, 0x03	; 3
 18c:	89 2f       	mov	r24, r25
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	85 b9       	out	0x05, r24	; 5
 194:	08 95       	ret

00000196 <initSwitchPort>:
#include <avr/io.h>

// Klargør switch-porten
void initSwitchPort()
{
	DDRA = 0b00000000;
 196:	11 b8       	out	0x01, r1	; 1
 198:	08 95       	ret

0000019a <switchStatus>:
}

// Læser alle switches samtidigt
unsigned char switchStatus()
{
	return ~PINA;
 19a:	80 b1       	in	r24, 0x00	; 0
}
 19c:	80 95       	com	r24
 19e:	08 95       	ret

000001a0 <switchOn>:
// Returnerer TRUE, hvis switchen med nummeret
// "switch_nr" er aktiveret - ellers returneres FALSE
unsigned char switchOn(unsigned char switch_nr)
{
	unsigned char mask;
	if (switch_nr <= 7)
 1a0:	88 30       	cpi	r24, 0x08	; 8
 1a2:	60 f4       	brcc	.+24     	; 0x1bc <switchOn+0x1c>
	{
		mask = 0b00000001 << switch_nr;
		return ~PINA & mask;
 1a4:	90 b1       	in	r25, 0x00	; 0
unsigned char switchOn(unsigned char switch_nr)
{
	unsigned char mask;
	if (switch_nr <= 7)
	{
		mask = 0b00000001 << switch_nr;
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <switchOn+0x10>
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	8a 95       	dec	r24
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <switchOn+0xc>
		return ~PINA & mask;
 1b4:	89 2f       	mov	r24, r25
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	08 95       	ret
	}
	else return 0;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	08 95       	ret

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
